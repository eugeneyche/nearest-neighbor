/cpp
1. data_set.h & data_set.cpp
	1.1 data_set class
	1.2 void load(data_set & st, FILE * in)
			loads the vectors from a file
	1.3 void label(data_set & st, FILE * in)
			loads the labels from a file
	1.4 max_variance_index(data_set & sub)
			return the index of the vector with the max variance in the passed in data_set

2. vector_math.h & vector_math.cpp
	2.1 typedef vector <double> euclid_vectors
			define euclid_vector as a vector of double
	2.2 double distance_to(euclid_vector & v1, euclid_vector & v2)
			return euclidean distance between two vectors
	2.3 double selector(vector<double> s, int k)
			return the kth smallest element in the passed in vector.

3. nn.h & nn.cpp
	3.1 euclid_vector * nn(euclid_vector * query, data_set & data)
			gets the nearest neighbor of query from data
	3.2 data_set k_nn(int k, euclid_vector * query, data_set & data)
			gets the k nearest neighbor of query from data
	3.3 data_set c_approx_nn(double c, euclid_vector * query, data_set & data, euclid_vector * nn)
			return the data_set of all vector within c times nearest neighbor distance of the query
	3.4 euclid_vector * kd_tree_nn(euclid_vector * query, data_set & data, kd_tree_node * root)
			gets nearest neighbor of query through kd_tree
	3.5 data_set kd_tree_k_nn(int k, euclid_vector * query, data_set & data, kd_tree_node * root)
			gets k nearest neighbor of query through kd_tree
	3.6 euclid_vector * virtual_spill_tree_nn(euclid_vector * query, data_set & data, virtual_spill_tree_node * root)
			gets nearest neighbor of query through query_tree
	3.7 data_set virtual_spill_tree_k_nn(int k, euclid_vector * query, data_set & data, virtual_spill_tree_node * root)
			gets k nearest neighbor of query through query_tree

4. kd_tree.h & kd_tree.cpp
	4.1 class kd_tree_node
	4.2 vector<int> kd_subdomain(euclid_vector * query, kd_tree_node * root)
			get subdomain from the leaf of the kd_tree for a given query
	4.3 kd_tree_node * kd_tree(double c, data_set & data)
			generates a kd_tree for given data, with leaf size c times train data size
	4.4 kd_tree_node * spill_tree(double c, double a, data_set & data)
			generates a spill_tree for given data, with leaf size c times train data size
	4.5 void save_kd_tree(kd_tree_node * root, FILE * out)
			saves kd_tree into a given file
	4.6 kd_tree_node * load_kd_tree(FILE * in)
			loads kd_tree from a given file

5. virtual_spill_tree.h & virtual_spill_tree.cpp
	5.1 class virtual_spill_tree_node
	5.2 vector <int> virtual_spill_subdomain(euclid_vector * query, virtual_spill_tree_node * root)
			get subdomain from the leaf of the virtual_spill_tree for a given query
	5.3 virtual_spill_tree_node * virtual_spill_tree(double a, kd_tree_node * root, data_set & data)
			generates a virtual_spill_tree for given data, with range parameter a based on kd_tree


6.  test.h & test.cpp
	7.1 test_setup(char * path)
			load data from files
